// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.ObjectId

    @@index([name])
}

model Note {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    content     String
    isPublic    Boolean  @default(false)
    isPinned    Boolean  @default(false)
    color       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
    
    category    Category? @relation(fields: [categoryId], references: [id])
    categoryId  String?   @db.ObjectId
    
    tags        TagsOnNotes[]
    
    @@index([userId])
    @@index([isPublic])
    @@index([isPinned])
    @@index([categoryId])
}

model Category {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    color       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
    
    notes       Note[]
    
    @@unique([name, userId])
    @@index([userId])
}

model Tag {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    color       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
    
    notes       TagsOnNotes[]
    
    @@unique([name, userId])
    @@index([userId])
}

model TagsOnNotes {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
    noteId      String   @db.ObjectId
    
    tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId       String   @db.ObjectId
    
    assignedAt  DateTime @default(now())
    
    @@unique([noteId, tagId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    notes         Note[]
    categories    Category[]
    tags          Tag[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
